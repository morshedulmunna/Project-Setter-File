openapi: 3.0.0
paths:
  /v1.0.0/api:
    get:
      operationId: AppController_getWelcome
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_0
        - App
  /v1.0.0/api/health:
    get:
      operationId: AppController_checkHealth
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_0
  /v1.0.0/api/auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                password:
                  type: string
                  description: User password
                  minLength: 6
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          description: Bad request
      summary: Register a new user
      tags: &ref_1
        - Authentication
  /v1.0.0/api/auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                password:
                  type: string
                  description: User password
      responses:
        '200':
          description: User successfully logged in
        '401':
          description: Unauthorized
      summary: Login user
      tags: *ref_1
  /v1.0.0/api/auth/forgot-password:
    post:
      operationId: AuthController_forgotPassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
      responses:
        '200':
          description: Reset password email sent
        '404':
          description: User not found
      summary: Request password reset
      tags: *ref_1
  /v1.0.0/api/auth/reset-password:
    post:
      operationId: AuthController_resetPassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  description: Reset password token
                newPassword:
                  type: string
                  description: New password
                  minLength: 6
      responses:
        '200':
          description: Password successfully reset
        '400':
          description: Invalid or expired token
      summary: Reset password with token
      tags: *ref_1
  /v1.0.0/api/auth/verify:
    get:
      operationId: AuthController_verifyEmail
      parameters:
        - name: token
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Email successfully verified
        '400':
          description: Invalid verification token
      summary: Verify email address
      tags: *ref_1
info:
  title: API Documentation
  description: This is API documentation
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:5000/
    description: Local server
  - url: https://api.example.com/
    description: Production server
components:
  securitySchemes:
    JWT-auth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: Enter JWT token
      in: header
  schemas:
    Auth:
      type: object
      properties:
        id:
          type: number
          description: The unique identifier for the auth record
        email:
          type: string
          description: The unique email address of the user
        password:
          type: string
          description: The hashed password of the user
        isVerified:
          type: boolean
          description: Whether the user email is verified
          default: false
        verificationToken:
          type: string
          description: Token used for email verification
          nullable: true
        resetPasswordToken:
          type: string
          description: Token used for password reset
          nullable: true
        resetPasswordExpires:
          format: date-time
          type: string
          description: Expiration timestamp for password reset token
          nullable: true
        createdAt:
          format: date-time
          type: string
          description: Timestamp when the record was created
        updatedAt:
          format: date-time
          type: string
          description: Timestamp when the record was last updated
      required:
        - id
        - email
        - password
        - isVerified
        - verificationToken
        - resetPasswordToken
        - resetPasswordExpires
        - createdAt
        - updatedAt
externalDocs:
  description: OpenAPI JSON
  url: /api/docs-json
